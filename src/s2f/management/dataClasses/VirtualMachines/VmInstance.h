#ifndef VMINSTANCE_H_
#define VMINSTANCE_H_

#include "../../../management/dataClasses/VirtualMachines/VirtualMachine.h"

struct VmInstanceType
{
    std::string userId;
    const VirtualMachine *base;
    uint64_t rentingTime;
    int numInstances;
};

/**
 *
 * Class that represents a Virtual Machine requested by a <b>CloudUserInstance</b>.
 *
 */
class VmInstance
{
private:
    const VmInstanceType *type; //!< Reference to the extrinsic state
    std::string id;             // Name that unequivocally identifies this VM instance.
    int instanceNumber;         // Instance number of this VM generated by <i>userID</i>. This number refers to the position of this instance in the VMs vector (see <b>CloudUserInstance</b>).
    tVmState state;             // State of this VM instance.

public:
    /**
     * Constructor.
     *
     * Generates a unique name for this VM instance using the following syntax: <i>vmType</i>-<i>userID</i>-[<i>currentInstanceIndex</i>/<i>totalVmInstances</i>]
     *
     * @param vmType Type of this VM.
     * @param currentInstanceIndex Current instance number. First instance of this VM must be 0.
     * @param totalVmInstances Total number of VM instances to be created by <i>userID</i>. This parameter is only used to generate the <b>vmInstanceID</b>.
     * @param userID User that generated this VM instance.
     */
    VmInstance(const VmInstanceType *type, int currentInstanceIndex, int totalVmInstances);

    /**
     * Gets the ID that unequivocally identifies this VM instance.
     *
     * @return Name that unequivocally identifies this VM instance.
     */
    int getInstanceNumber() const { return instanceNumber; }

    /**
     * Gets the current state of this VM instance.
     *
     * @return Current state of this VM instance.
     */
    tVmState getState() const { return state; }

    /**
     * Sets a new state for this VM instance.
     *
     * @param state New state for this VM instance.
     */
    void setState(tVmState state) { this->state = state; }

    /**
     * Gets the user ID that created this VM instance.
     *
     * @return User ID that created this VM instance.
     */
    const std::string &getUserId() const { return type->userId; }

    /**
     * Gets the ID that unequivocally identifies this VM instance.
     *
     * @return ID that unequivocally identifies this VM instance.
     */
    const std::string &getId() const { return id; }

    /**
     * Gets the type of this VM instance.
     *
     * @return Type of this VM instance.
     */
    const std::string &getVmType() const { return type->base->getType(); }
    const VirtualMachine *getVmBase() const { return type->base; }

    friend std::ostream &operator<<(std::ostream &os, const VmInstance &obj);

private:
    /**
     * Parses the state of this VM into string format.
     *
     * @param vmState An state of this VM instance.
     * @return String containing the state of this VM.
     */
    std::string stateToString(tVmState vmState) const;
};

#endif /* VMINSTANCE_H_ */
