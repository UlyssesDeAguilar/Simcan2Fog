%description:

Tests the functionality of the template ControlTable with the VmControlBlock

%includes:
#include "s2f/architecture/nodes/NodeResources.h"

%activity:

// Create a possible node
NodeResources resources = {
    .memory = 32,       // GB
    .disk = 500,        // GB
    .cores = 24,
    .vms = 5,
    .users = 5
};

EV << std::boolalpha;
EV << "Node being studied:\n" << resources << "\n";

// Create a comletely fitting vm request
VirtualMachine vm("test_vm", 22.0, 24, 24, 500, 32);

EV << "Case study 1:\n" << vm << '\n';

// Check user and vm space
EV << "Has user and vm space: " << (resources.hasUserAndVmSpace()) << '\n';

// Check exhaustion
EV << "Is exhausted: " << (resources.isExhausted()) << '\n';

// LE operator
EV << "Less-or equal: " << (resources <= vm) << '\n';

// Equals operator
EV << "Equals: " << (resources == vm) << '\n';

// Get the logical distance
EV << "Logical distance: " << resources.getLogicalDistance(vm) << '\n';

// Setup new case study
vm.setNumCores(25);
EV << "\nCase study 2:\n" << vm << '\n';

// Check user and vm space
EV << "Has user and vm space: " << (resources.hasUserAndVmSpace()) << '\n';

// Check exhaustion
EV << "Is exhausted: " << (resources.isExhausted()) << '\n';

// LE operator
EV << "Less-or equal: " << (resources <= vm) << '\n';

// Equals operator
EV << "Equals: " << (resources == vm) << '\n';

// Get the logical distance
EV << "Logical distance: " << resources.getLogicalDistance(vm) << '\n';

EV << "\nSimulating exhaustion by users\n";

// Check exhaustion
resources.users = 0;
EV << "Is exhausted: " << (resources.isExhausted()) << '\n';
resources.users = 5;

EV << "\nSimulating exhaustion by vms\n";

// Check exhaustion
resources.vms = 0;
EV << "Is exhausted: " << (resources.isExhausted()) << '\n';
resources.vms = 5;

%contains: stdout
Node being studied:
Memory: 32
Disk:   500
Cores:  24
Users:  5
Vms:    5

Case study 1:
Type:        test_vm
Cost (h):    22
Cores (#):   24
SCU (#):     24
Disk (GB):   500
Memory (GB): 32

Has user and vm space: true
Is exhausted: false
Less-or equal: true
Equals: true
Logical distance: 0

Case study 2:
Type:        test_vm
Cost (h):    22
Cores (#):   25
SCU (#):     24
Disk (GB):   500
Memory (GB): 32

Has user and vm space: true
Is exhausted: false
Less-or equal: false
Equals: false
Logical distance: 1.79769e+308

Simulating exhaustion by users
Is exhausted: true

Simulating exhaustion by vms
Is exhausted: true